{"id":"node_modules/build-docs/lib/set-type.js","dependencies":[{"name":"/Users/yonathanloekito/Documents/hacktiv8/Phase2-2/mini-wp-1/client/package.json","includedInParent":true,"mtime":1561360128787},{"name":"/Users/yonathanloekito/Documents/hacktiv8/Phase2-2/mini-wp-1/client/node_modules/build-docs/package.json","includedInParent":true,"mtime":1561360126173}],"generated":{"js":"const JSON_SCHEMA_TYPES = ['null', 'boolean', 'object', 'array', 'number', 'string', 'file'];\n\nfunction getType(type) {\n  // JSDoc has 'Object', jsonschema uses 'object'\n  if (type === 'Object') {\n    return 'object';\n  }\n\n  return type.toLowerCase();\n}\n\nconst IS_TYPE_ARRAY = /\\[\\]$/;\n\nmodule.exports = function setType(rawType, output) {\n  const type = getType(rawType);\n\n  // Is type an array?\n  if (type.match(IS_TYPE_ARRAY)) {\n    output.type = 'array';\n    output.items = { type: getType(type.replace(IS_TYPE_ARRAY, '')) };\n    validateType(output.items.type);\n  } else {\n    output.type = type;\n    validateType(output.type);\n  }\n\n  if (output.exampleData) {\n    output.exampleData = castExampleType(output.type, output.exampleData);\n  }\n\n  return output;\n};\n\nmodule.exports.JSON_SCHEMA_TYPES = JSON_SCHEMA_TYPES;\n\nfunction validateType(type) {\n  if (JSON_SCHEMA_TYPES.indexOf(type) === -1) {\n    throw new Error(`Invalid type \"${type}\" - Type must be: ${JSON_SCHEMA_TYPES.join(', ')}`);\n  }\n}\n\nfunction castExampleType(type, data) {\n  if (type === 'number') {\n    return parseFloat(data);\n  } else if (type === 'boolean') {\n    return data === 'true';\n  } else if (type === 'array') {\n    return JSON.parse(data);\n  }\n  return data;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/build-docs/lib/set-type.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}}],"sources":{"node_modules/build-docs/lib/set-type.js":"const JSON_SCHEMA_TYPES = ['null', 'boolean', 'object', 'array', 'number', 'string', 'file'];\n\nfunction getType(type) {\n  // JSDoc has 'Object', jsonschema uses 'object'\n  if (type === 'Object') {\n    return 'object';\n  }\n\n  return type.toLowerCase();\n}\n\nconst IS_TYPE_ARRAY = /\\[\\]$/;\n\nmodule.exports = function setType(rawType, output) {\n  const type = getType(rawType);\n\n  // Is type an array?\n  if (type.match(IS_TYPE_ARRAY)) {\n    output.type = 'array';\n    output.items = { type: getType(type.replace(IS_TYPE_ARRAY, '')) };\n    validateType(output.items.type);\n  } else {\n    output.type = type;\n    validateType(output.type);\n  }\n\n  if (output.exampleData) {\n    output.exampleData = castExampleType(output.type, output.exampleData);\n  }\n\n  return output;\n};\n\nmodule.exports.JSON_SCHEMA_TYPES = JSON_SCHEMA_TYPES;\n\nfunction validateType(type) {\n  if (JSON_SCHEMA_TYPES.indexOf(type) === -1) {\n    throw new Error(`Invalid type \"${type}\" - Type must be: ${JSON_SCHEMA_TYPES.join(', ')}`);\n  }\n}\n\nfunction castExampleType(type, data) {\n  if (type === 'number') {\n    return parseFloat(data);\n  } else if (type === 'boolean') {\n    return data === 'true';\n  } else if (type === 'array') {\n    return JSON.parse(data);\n  }\n  return data;\n}\n"},"lineCount":52}},"error":null,"hash":"2aa4d5036837698b99314aa208998c2f","cacheData":{"env":{}}}